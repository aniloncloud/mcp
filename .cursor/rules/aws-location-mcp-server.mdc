---
description: 
globs: 
alwaysApply: true
---
# AWS Location MCP Server Development Rules

ALWAYS continue to evalaute the next steps and implement the next steps that are best fit and dont want for feedback and pause to implement next steps. 

No hardcoding locations. Always try to infer coordinates if not being passed along with text using the geo-

## API Usage
- Do **not** use the AWS Places Index API.
- Do **not** use the AWS Location Service `location` client (e.g., `boto3.client('location')`).
- Use only the following AWS Location Service Places APIs via boto3:
  - [geo-places](mdc:https:/boto3.amazonaws.com/v1/documentation/api/latest/reference/services/geo-places.html)
  - [get_place](mdc:https:/boto3.amazonaws.com/v1/documentation/api/latest/reference/services/geo-places/client/get_place.html)
  - [reverse_geocode](mdc:https:/boto3.amazonaws.com/v1/documentation/api/latest/reference/services/geo-places/client/reverse_geocode.html)
  - [search_nearby](mdc:https:/boto3.amazonaws.com/v1/documentation/api/latest/reference/services/geo-places/client/search_nearby.html)
  - [search_text](mdc:https:/boto3.amazonaws.com/v1/documentation/api/latest/reference/services/geo-places/client/search_text.html)
  - @geocode : https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/geo-places/client/geocode.html
  - 
- Build additional tools such as `search_places_open_now` and other intuitive extensions.

## Development Scope
- Restrict all new development and changes to the [`src/aws-location-mcp-server`](mdc:src/aws-location-mcp-server) folder.
- Align all new code with the existing coding standards in the repository.
- This MCP server is not public yet; focus on intuitive, builder-friendly design.

## Testing Strategy
- **No mock-based tests.** All tests must use real AWS Location Service endpoints.
- Always run tests in a Python virtual environment.
- Always run integration tests and display their results.
- Build tests incrementally: start with basic test cases, then use their output as input for more advanced test cases to confirm correctness.
- To ensure repeatable testing, create a shell script in [`src/aws-location-mcp-server/tests`](mdc:src/aws-location-mcp-server/tests) to invoke the integration tests.

## Example Test Workflow
1. Write a basic integration test (e.g., for `search_text`).
2. Use the output of the basic test as input for a more advanced test (e.g., `get_place` or `reverse_geocode`).
3. Continue chaining tests to build confidence in the tool's correctness.

## Folder Reference
- All code, tests, and scripts must reside within [`src/aws-location-mcp-server`](mdc:src/aws-location-mcp-server).
- The integration test runner script must be placed in [`src/aws-location-mcp-server/tests`](mdc:src/aws-location-mcp-server/tests).
